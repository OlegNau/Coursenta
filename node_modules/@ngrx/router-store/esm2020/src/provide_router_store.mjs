import { ENVIRONMENT_INITIALIZER, inject } from '@angular/core';
import { _createRouterConfig, _ROUTER_CONFIG, ROUTER_CONFIG, } from './router_store_config';
import { FullRouterStateSerializer, } from './serializers/full_serializer';
import { MinimalRouterStateSerializer } from './serializers/minimal_serializer';
import { RouterStateSerializer, } from './serializers/base';
import { StoreRouterConnectingService } from './store_router_connecting.service';
/**
 * Connects the Angular Router to the Store.
 *
 * @usageNotes
 *
 * ```ts
 * bootstrapApplication(AppComponent, {
 *   providers: [provideRouterStore()],
 * });
 * ```
 */
export function provideRouterStore(config = {}) {
    return {
        Éµproviders: [
            { provide: _ROUTER_CONFIG, useValue: config },
            {
                provide: ROUTER_CONFIG,
                useFactory: _createRouterConfig,
                deps: [_ROUTER_CONFIG],
            },
            {
                provide: RouterStateSerializer,
                useClass: config.serializer
                    ? config.serializer
                    : config.routerState === 0 /* Full */
                        ? FullRouterStateSerializer
                        : MinimalRouterStateSerializer,
            },
            {
                provide: ENVIRONMENT_INITIALIZER,
                multi: true,
                useFactory() {
                    return () => inject(StoreRouterConnectingService);
                },
            },
            StoreRouterConnectingService,
        ],
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZV9yb3V0ZXJfc3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9tb2R1bGVzL3JvdXRlci1zdG9yZS9zcmMvcHJvdmlkZV9yb3V0ZXJfc3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQ0wsbUJBQW1CLEVBQ25CLGNBQWMsRUFDZCxhQUFhLEdBR2QsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQ0wseUJBQXlCLEdBRTFCLE1BQU0sK0JBQStCLENBQUM7QUFDdkMsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDaEYsT0FBTyxFQUVMLHFCQUFxQixHQUN0QixNQUFNLG9CQUFvQixDQUFDO0FBQzVCLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBR2pGOzs7Ozs7Ozs7O0dBVUc7QUFDSCxNQUFNLFVBQVUsa0JBQWtCLENBRWhDLFNBQStCLEVBQUU7SUFDakMsT0FBTztRQUNMLFVBQVUsRUFBRTtZQUNWLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO1lBQzdDO2dCQUNFLE9BQU8sRUFBRSxhQUFhO2dCQUN0QixVQUFVLEVBQUUsbUJBQW1CO2dCQUMvQixJQUFJLEVBQUUsQ0FBQyxjQUFjLENBQUM7YUFDdkI7WUFDRDtnQkFDRSxPQUFPLEVBQUUscUJBQXFCO2dCQUM5QixRQUFRLEVBQUUsTUFBTSxDQUFDLFVBQVU7b0JBQ3pCLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVTtvQkFDbkIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLGlCQUFxQjt3QkFDekMsQ0FBQyxDQUFDLHlCQUF5Qjt3QkFDM0IsQ0FBQyxDQUFDLDRCQUE0QjthQUNqQztZQUNEO2dCQUNFLE9BQU8sRUFBRSx1QkFBdUI7Z0JBQ2hDLEtBQUssRUFBRSxJQUFJO2dCQUNYLFVBQVU7b0JBQ1IsT0FBTyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsNEJBQTRCLENBQUMsQ0FBQztnQkFDcEQsQ0FBQzthQUNGO1lBQ0QsNEJBQTRCO1NBQzdCO0tBQ0YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFTlZJUk9OTUVOVF9JTklUSUFMSVpFUiwgaW5qZWN0LCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgX2NyZWF0ZVJvdXRlckNvbmZpZyxcbiAgX1JPVVRFUl9DT05GSUcsXG4gIFJPVVRFUl9DT05GSUcsXG4gIFJvdXRlclN0YXRlLFxuICBTdG9yZVJvdXRlckNvbmZpZyxcbn0gZnJvbSAnLi9yb3V0ZXJfc3RvcmVfY29uZmlnJztcbmltcG9ydCB7XG4gIEZ1bGxSb3V0ZXJTdGF0ZVNlcmlhbGl6ZXIsXG4gIFNlcmlhbGl6ZWRSb3V0ZXJTdGF0ZVNuYXBzaG90LFxufSBmcm9tICcuL3NlcmlhbGl6ZXJzL2Z1bGxfc2VyaWFsaXplcic7XG5pbXBvcnQgeyBNaW5pbWFsUm91dGVyU3RhdGVTZXJpYWxpemVyIH0gZnJvbSAnLi9zZXJpYWxpemVycy9taW5pbWFsX3NlcmlhbGl6ZXInO1xuaW1wb3J0IHtcbiAgQmFzZVJvdXRlclN0b3JlU3RhdGUsXG4gIFJvdXRlclN0YXRlU2VyaWFsaXplcixcbn0gZnJvbSAnLi9zZXJpYWxpemVycy9iYXNlJztcbmltcG9ydCB7IFN0b3JlUm91dGVyQ29ubmVjdGluZ1NlcnZpY2UgfSBmcm9tICcuL3N0b3JlX3JvdXRlcl9jb25uZWN0aW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgRW52aXJvbm1lbnRQcm92aWRlcnMgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5cbi8qKlxuICogQ29ubmVjdHMgdGhlIEFuZ3VsYXIgUm91dGVyIHRvIHRoZSBTdG9yZS5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICpcbiAqIGBgYHRzXG4gKiBib290c3RyYXBBcHBsaWNhdGlvbihBcHBDb21wb25lbnQsIHtcbiAqICAgcHJvdmlkZXJzOiBbcHJvdmlkZVJvdXRlclN0b3JlKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVSb3V0ZXJTdG9yZTxcbiAgVCBleHRlbmRzIEJhc2VSb3V0ZXJTdG9yZVN0YXRlID0gU2VyaWFsaXplZFJvdXRlclN0YXRlU25hcHNob3Rcbj4oY29uZmlnOiBTdG9yZVJvdXRlckNvbmZpZzxUPiA9IHt9KTogRW52aXJvbm1lbnRQcm92aWRlcnMge1xuICByZXR1cm4ge1xuICAgIMm1cHJvdmlkZXJzOiBbXG4gICAgICB7IHByb3ZpZGU6IF9ST1VURVJfQ09ORklHLCB1c2VWYWx1ZTogY29uZmlnIH0sXG4gICAgICB7XG4gICAgICAgIHByb3ZpZGU6IFJPVVRFUl9DT05GSUcsXG4gICAgICAgIHVzZUZhY3Rvcnk6IF9jcmVhdGVSb3V0ZXJDb25maWcsXG4gICAgICAgIGRlcHM6IFtfUk9VVEVSX0NPTkZJR10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwcm92aWRlOiBSb3V0ZXJTdGF0ZVNlcmlhbGl6ZXIsXG4gICAgICAgIHVzZUNsYXNzOiBjb25maWcuc2VyaWFsaXplclxuICAgICAgICAgID8gY29uZmlnLnNlcmlhbGl6ZXJcbiAgICAgICAgICA6IGNvbmZpZy5yb3V0ZXJTdGF0ZSA9PT0gUm91dGVyU3RhdGUuRnVsbFxuICAgICAgICAgID8gRnVsbFJvdXRlclN0YXRlU2VyaWFsaXplclxuICAgICAgICAgIDogTWluaW1hbFJvdXRlclN0YXRlU2VyaWFsaXplcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHByb3ZpZGU6IEVOVklST05NRU5UX0lOSVRJQUxJWkVSLFxuICAgICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgICAgdXNlRmFjdG9yeSgpIHtcbiAgICAgICAgICByZXR1cm4gKCkgPT4gaW5qZWN0KFN0b3JlUm91dGVyQ29ubmVjdGluZ1NlcnZpY2UpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIFN0b3JlUm91dGVyQ29ubmVjdGluZ1NlcnZpY2UsXG4gICAgXSxcbiAgfTtcbn1cbiJdfQ==